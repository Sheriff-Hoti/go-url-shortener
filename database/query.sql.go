// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package database

import (
	"context"
)

const createUrl = `-- name: CreateUrl :one
INSERT INTO urls (
  original_url, shortened_url
) VALUES (
  ?, ?
)
RETURNING original_url, shortened_url
`

type CreateUrlParams struct {
	OriginalUrl  string
	ShortenedUrl string
}

func (q *Queries) CreateUrl(ctx context.Context, arg CreateUrlParams) (Url, error) {
	row := q.db.QueryRowContext(ctx, createUrl, arg.OriginalUrl, arg.ShortenedUrl)
	var i Url
	err := row.Scan(&i.OriginalUrl, &i.ShortenedUrl)
	return i, err
}

const deleteUrl = `-- name: DeleteUrl :exec
DELETE FROM urls
WHERE original_url = ?
`

func (q *Queries) DeleteUrl(ctx context.Context, originalUrl string) error {
	_, err := q.db.ExecContext(ctx, deleteUrl, originalUrl)
	return err
}

const getUrl = `-- name: GetUrl :one
SELECT original_url, shortened_url FROM urls
WHERE original_url = ? LIMIT 1
`

func (q *Queries) GetUrl(ctx context.Context, originalUrl string) (Url, error) {
	row := q.db.QueryRowContext(ctx, getUrl, originalUrl)
	var i Url
	err := row.Scan(&i.OriginalUrl, &i.ShortenedUrl)
	return i, err
}

const listUrls = `-- name: ListUrls :many
SELECT original_url, shortened_url FROM urls
ORDER BY original_url ASC
`

func (q *Queries) ListUrls(ctx context.Context) ([]Url, error) {
	rows, err := q.db.QueryContext(ctx, listUrls)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Url
	for rows.Next() {
		var i Url
		if err := rows.Scan(&i.OriginalUrl, &i.ShortenedUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUrl = `-- name: UpdateUrl :one
UPDATE urls
  set shortened_url = ?
WHERE original_url = ?
RETURNING original_url, shortened_url
`

type UpdateUrlParams struct {
	ShortenedUrl string
	OriginalUrl  string
}

func (q *Queries) UpdateUrl(ctx context.Context, arg UpdateUrlParams) (Url, error) {
	row := q.db.QueryRowContext(ctx, updateUrl, arg.ShortenedUrl, arg.OriginalUrl)
	var i Url
	err := row.Scan(&i.OriginalUrl, &i.ShortenedUrl)
	return i, err
}
